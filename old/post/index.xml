<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ha Link&#39;s Space</title>
    <link>https://halink0803.github.io/post/index.xml</link>
    <description>Recent content in Posts on Ha Link&#39;s Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 14 Jan 2017 10:54:24 +0200</lastBuildDate>
    <atom:link href="https://halink0803.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Day 4 - Add Multilanguage with Hugo</title>
      <link>https://halink0803.github.io/post/day-4-add-multilanguage-with-hugo/</link>
      <pubDate>Sat, 14 Jan 2017 10:54:24 +0200</pubDate>
      
      <guid>https://halink0803.github.io/post/day-4-add-multilanguage-with-hugo/</guid>
      <description>&lt;p&gt;Actually, there is not many things to talk about Hugo multilanguages support cos everything was described in details in &lt;a href=&#34;https://gohugo.io/content/multilingual/&#34;&gt;multilangual documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only one thing I want to add here is if you want to detect user region automatically for displaying the right language then you can use &lt;a href=&#34;https://ipinfo.io/&#34;&gt;ip info service&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;	$.getJSON(&#39;http://ipinfo.io&#39;, function(data){
  	console.log(data)
	})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you will get the response for the ip info which contains the location information:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;	{
	  &amp;quot;ip&amp;quot;: &amp;quot;111.223.103.130&amp;quot;,
	  &amp;quot;hostname&amp;quot;: &amp;quot;No Hostname&amp;quot;,
	  &amp;quot;city&amp;quot;: &amp;quot;Nepal Park&amp;quot;,
	  &amp;quot;region&amp;quot;: &amp;quot;SINGAPORE&amp;quot;,
	  &amp;quot;country&amp;quot;: &amp;quot;SG&amp;quot;,
	  &amp;quot;loc&amp;quot;: &amp;quot;1.3017,103.7881&amp;quot;,
	  &amp;quot;org&amp;quot;: &amp;quot;AS4657 StarHub Internet Exchange&amp;quot;
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Day 3 - Hugo search with lunr and gulp</title>
      <link>https://halink0803.github.io/post/day-3-search-lunr-gulp/</link>
      <pubDate>Wed, 11 Jan 2017 11:58:57 +0800</pubDate>
      
      <guid>https://halink0803.github.io/post/day-3-search-lunr-gulp/</guid>
      <description>&lt;p&gt;Today I will apply javascript dynamic search into this blog using lunr.js - a library allow us to do that. This is base on a tutorial from Hugo official documentation - &lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;hugo + gruntjs + lunrjs = &amp;lt;3 search&lt;/a&gt;. However, I will modify it to use Gulp instead of Grunt, simply is that I love Gulp more than Grunt :))&lt;/p&gt;

&lt;p&gt;Here is the detail:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirement&lt;/strong&gt;:&lt;br /&gt;
    - A &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; site&lt;br /&gt;
    - &lt;a href=&#34;http://lunrjs.com/&#34;&gt;lunrjs&lt;/a&gt; - for searching&lt;br /&gt;
    - &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var gulp = require(&#39;gulp&#39;);
var fs = require(&#39;fs&#39;);
var glob = require(&#39;glob&#39;);
var toml = require(&#39;toml&#39;);
var S = require(&#39;string&#39;);
var file = require(&#39;gulp-file&#39;);

var path = {
	&#39;content&#39; : &#39;site/content/**/*.md&#39;
};

var processMDFile = function() {
	var indexFiles = [];
	glob(path.content, function(err, files){
		if(err) {
			console.log(err);
		} else {
			files.forEach(function(file) {
				var content = fs.readFileSync(file, &#39;utf8&#39;);
				content = content.split(&#39;+++&#39;);
				var frontMatter = toml.parse(content[1].trim());

				// you might have different definition of permalink then change this
				var href = frontMatter.slug;
				if(frontMatter.type != null &amp;amp;&amp;amp; frontMatter.type == &#39;post&#39; ){
					href = &#39;/post/&#39; + href;
				}

				//build lunr index
				var index = {
					title: frontMatter.title,
	        href: href,
	        content: S(content[2]).trim().stripTags().stripPunctuation().s
				}
				//console.log(index);
				indexFiles.push(index);
			});
		}
		//console.log(indexFiles);
		file(&#39;PagesIndex.json&#39;, JSON.stringify(indexFiles), {src: true}).pipe(gulp.dest(&#39;./site/static/js/lunr/&#39;));
	});
};

gulp.task(&amp;quot;lunr-index&amp;quot;, processMDFile());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other part on how to use&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 1 - Github page with Hugo</title>
      <link>https://halink0803.github.io/post/github-page-with-hugo/</link>
      <pubDate>Tue, 10 Jan 2017 11:58:57 +0800</pubDate>
      
      <guid>https://halink0803.github.io/post/github-page-with-hugo/</guid>
      <description>&lt;p&gt;This is my first post for #100DaysOfCode from &lt;a href=&#34;https://medium.freecodecamp.com/start-2017-with-the-100daysofcode-improved-and-updated-18ce604b237b#.c5xcsjeiy&#34;&gt;Boot Up 2017 with the #100DaysOfCode Challenge&lt;/a&gt;. Maybe I start quite late for the challenge but better late than never.&lt;/p&gt;

&lt;p&gt;Following with the challenge, besides writing log about it everyday as the rules, I will try to figure out new things and write frequently blog about them. Therefore, I start this blog. I used to build my github page with jekyll, but one day, when randomly surfing the internet, I unexpectedly met Hugo and I decided to build a new site with it &lt;a href=&#34;http://halink.space&#34;&gt;halink.space&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since there is another tutorial about this on Hugo official documentation &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages&#34;&gt;site&lt;/a&gt;, it is a little bit complicated and outdated cos recently github alows github page to generate site from &amp;ldquo;docs&amp;rdquo; folder in the git repository. Then, the key factor for using hugo with github page here is only the config.toml file.&lt;/p&gt;

&lt;p&gt;With gihub page there are two types of site you can generate, first one is personal/organization page which has the url structure like &lt;em&gt;&lt;a href=&#34;https://your-github-username.github.io&#34;&gt;https://your-github-username.github.io&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&#34;https://your-organization-name.github.io&#34;&gt;https://your-organization-name.github.io&lt;/a&gt;&lt;/em&gt; and the second type is git repository page, this page usually for repository documentation and has the url structure like &lt;em&gt;&lt;a href=&#34;https://your-github-user-name.github.io/the-git-repository-slug&#34;&gt;https://your-github-user-name.github.io/the-git-repository-slug&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&#34;https://your-organization-name.github.io/the-git-repository-slug&#34;&gt;https://your-organization-name.github.io/the-git-repository-slug&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The different between two types of site above is not only the url structure but more important is the source folder which Github used for build the site. The first types of site, Github only allow you to render from master branch, you need to put your hugo render (puslish code) into the master branch, so there is only one thing you need to do here is modify the config.toml and point the publish folder to your master branch of your git repository so here is my config.toml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;	pushlishDir = &#39;./&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second type of github page, you can either build the site from master branch or docs folder of your master branch, I prefer having a docs folder where I can store all the documetation for that project, then the config should be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;	publishDir = &#39;./docs&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;publishDir option tells Hugo where the site should be generate, then all you need is to run hugo, commit and push it to github. Remember to go to repository settings and activate the github page option, the your site is ready to online.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>100 days of code challenge</title>
      <link>https://halink0803.github.io/post/challenge-accepted/</link>
      <pubDate>Mon, 09 Jan 2017 10:02:07 +0800</pubDate>
      
      <guid>https://halink0803.github.io/post/challenge-accepted/</guid>
      <description>&lt;p&gt;This post is only for announcing that I accept 100 days of code challenge. Nothing much, I will try my best, somehow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://halink0803.github.io/post/hello-world/</link>
      <pubDate>Sat, 01 Oct 2016 10:34:49 +0700</pubDate>
      
      <guid>https://halink0803.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;This is my first post in this blog, then its name &amp;ldquo;Hello Word&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	print &#39;Hello World&#39;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>